const { cmd } = require('../command');

const games = new Map();

cmd({
  pattern: "tictactoe",
  alias: ["xo", "ttt"],
  desc: "Start a game of Tic Tac Toe",
  category: "games",
  react: "‚ùå",
  filename: __filename
},
async (conn, mek, m, { from, args }) => {
  const sender = m.sender;
  const mention = m.mentionedJid?.[0];

  if (!mention) {
    return conn.sendMessage(from, {
      text: "‚ùé Please mention your opponent!\n\nExample: *.tictactoe @user*"
    }, { quoted: mek });
  }

  if (mention === sender) {
    return conn.sendMessage(from, {
      text: "‚ùé You can't play against yourself!"
    }, { quoted: mek });
  }

  const gameId = `${from}:${mention}:${sender}`;
  if (games.has(from)) {
    return conn.sendMessage(from, {
      text: "‚ö†Ô∏è A game is already running in this chat!"
    }, { quoted: mek });
  }

  const board = ["1Ô∏è‚É£", "2Ô∏è‚É£", "3Ô∏è‚É£", "4Ô∏è‚É£", "5Ô∏è‚É£", "6Ô∏è‚É£", "7Ô∏è‚É£", "8Ô∏è‚É£", "9Ô∏è‚É£"];
  const state = {
    board,
    players: [sender, mention],
    turn: 0
  };

  games.set(from, state);

  await conn.sendMessage(from, {
    text: renderBoard(board, sender, mention),
    contextInfo: {
      mentionedJid: [sender, mention]
    }
  }, { quoted: mek });
});

// Listen to numbers 1-9 as move
for (let i = 1; i <= 9; i++) {
  cmd({
    pattern: String(i),
    desc: `Play move ${i} in Tic Tac Toe`,
    category: "games",
    filename: __filename
  }, async (conn, mek, m, { from }) => {
    const game = games.get(from);
    if (!game) return;

    const index = Number(m.body) - 1;
    const currentPlayer = game.players[game.turn % 2];

    if (m.sender !== currentPlayer) return;

    if (!["1Ô∏è‚É£","2Ô∏è‚É£","3Ô∏è‚É£","4Ô∏è‚É£","5Ô∏è‚É£","6Ô∏è‚É£","7Ô∏è‚É£","8Ô∏è‚É£","9Ô∏è‚É£"].includes(game.board[index])) {
      return conn.sendMessage(from, {
        text: "‚ùå That position is already taken!",
      }, { quoted: mek });
    }

    game.board[index] = game.turn % 2 === 0 ? "‚ùå" : "‚≠ïÔ∏è";
    game.turn++;

    const winner = checkWinner(game.board);
    if (winner) {
      await conn.sendMessage(from, {
        text: `üéâ *Tic Tac Toe Game Over!*\n\nWinner: @${currentPlayer.split('@')[0]}\n\n${renderBoard(game.board)}\n\n*Powered by Megalodon-MD*`,
        contextInfo: { mentionedJid: [currentPlayer] }
      }, { quoted: mek });
      games.delete(from);
    } else if (game.turn >= 9) {
      await conn.sendMessage(from, {
        text: `ü§ù *Draw!*\n\n${renderBoard(game.board)}\n\nNo winner this time.`,
      }, { quoted: mek });
      games.delete(from);
    } else {
      const next = game.players[game.turn % 2];
      await conn.sendMessage(from, {
        text: renderBoard(game.board, ...game.players) + `\n\nTurn: @${next.split('@')[0]}`,
        contextInfo: { mentionedJid: [next] }
      }, { quoted: mek });
    }
  });
}

function renderBoard(board, p1 = "Player 1", p2 = "Player 2") {
  return `üéÆ *Tic Tac Toe*\n@${p1.split('@')[0]} ‚ùå vs @${p2.split('@')[0]} ‚≠ïÔ∏è\n\n${board.slice(0, 3).join(' ')}\n${board.slice(3, 6).join(' ')}\n${board.slice(6, 9).join(' ')}\n`;
}

function checkWinner(b) {
  const winCombos = [
    [0,1,2], [3,4,5], [6,7,8], // rows
    [0,3,6], [1,4,7], [2,5,8], // cols
    [0,4,8], [2,4,6]           // diagonals
  ];
  for (let [a,b_,c] of winCombos) {
    if (b[a] === b[b_] && b[b_] === b[c]) return true;
  }
  return false;
}
